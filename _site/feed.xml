<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Ryan Jeon</title>
		<description>Stylish Jekyll Theme</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>My journey so far with Immigo</title>
				<description>&lt;p&gt;The time was the summer of 2020, when I decided to fly to Korea to be with my family after my internship was canceled from COVID-19. Thinking that I need to do something to make the summer useful, I decided to start a side project with my co-founder/sister Chelsea to add to our experience. We soon found a problem that we were already quite familiar with, which was around English teacher recruitment in Korea, and started to make a website to tackle this problem. Little did I know, what started out as a mere side project became something that would be the biggest pivotal point in my life.&lt;/p&gt;

&lt;p&gt;As the website we developed started to get unexpectedly large traction, and love from our users we thought that we could maybe take this even further and possibly run this as a business. This is when we decided to apply to Techstars and YC. After a series of interviews against all odds, we somehow managed our way into Techstars.&lt;/p&gt;

&lt;p&gt;After graduating college at the end of 2020, I dove right into the unknowns of the startup world with only 3 internships experience under my belt with no prior venture experience. Over the 3 months going through Techstars, I’ve done and experienced things that I never have before, and am still learning valuable skills everyday.&lt;/p&gt;

&lt;p&gt;Coming out of Techstars, we decided to pivot out of our original idea given various challenges (which I will get into in another post :D), into a peer-to-peer fluency focused English learning platform, where learners can quickly find the right cohort of peers to practice with through enrolling in a structured English course.&lt;/p&gt;

&lt;p&gt;Over the last few months after pivoting, we have already finished a course with 100% retention rate with 1200 students from 67 countries in our course waitlist partnering up with 6 YouTube/Udemy instructors who have in total over 2M followers combined. On the other side of the frontline, we are also training ESL engineers to speak better English using our Immigo method, in which we were able to sign a $4500 deal with a coding bootcamp Holberton School.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://immigoimages.s3.amazonaws.com/Welcomecall.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Snippet of our students from one of our courses&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Things have been rough, but I’ve been pushing through to make small progress everyday. I’m excited to see what will come out of this journey, and I hope you are too. Stay tuned for more :)&lt;/p&gt;
</description>
				<pubDate>Sat, 11 Sep 2021 00:00:00 +0900</pubDate>
				<link>/startup%20journey/2021/09/11/startup-journey.html</link>
				<guid isPermaLink="true">/startup%20journey/2021/09/11/startup-journey.html</guid>
			</item>
		
			<item>
				<title>(Short Story) The Collector</title>
				<description>&lt;p style=&quot;text-align: center;&quot;&gt;The Collector&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Glory to the state! I could not emphasize more how thankful I am for this opportunity to contribute to such a great cause to help our state succeed and help our fellow comrades. Oh how lucky I am! It is another beautiful day to work and things could not be more perfect: A gentle breeze drying off sweats on my forehead, comforting warmth from the sunshine, and friendly neighbors greeting me with affectionate smiles as I run down the hallway to get to the next room.

    I gently pressed my finger against the golden doorbell, excited to see Mr. Bradley again. Mr. Bradley has always been punctual, and as I expected, almost within a second, he greeted me with a big smile with the blue container I needed to collect. 

    “Glory to the state, James!” Mr. Bradley saluted me with his usual youthful energy. Despite Mr. Bradley’s old age, he was always very animated and full of life as if he was born just yesterday.

    “Glory to the state, Mr. Bradley! I hope you have a nice day.” I replied politely. I wanted to stick around but I needed to collect around hundred more boxes before the curfew and there was no time to be wasted.

    As soon as Mr. Bradley made his way back to his room, I quickly put the blue box Mr. Bradley gave me on top of the pile of other blue boxes stacked on the new wagon I brought out today. Yesterday, the state awarded me a newer wagon designed by our talented engineers to maximize the box collections and make it much easier for me to do my job. It came along with a certificate embellished with little golden triangles on the edges of the paper, stating that I have done well for the state, and the state expects me to continue to do my best to keep up my great work. It was another reminder of how the state appreciates our effort and every one of us was a significant part of bringing the state forward into the future. With that in mind, I wrapped my hands around the wooden handles of the wagon and marched forward. Running door to door, I diligently collected the blue boxes the state needed me to deliver. The growing height of the box stack on my wagon was a reminder of how many people lived in this particular hallway. Sometimes, I’d see some kids playing in the middle of the hallway and I’d have to yell at them playfully to get out of the way to pull my wagon through because the hallway was just wide enough to fit myself and the wagon itself. Then the kids would scuttle their ways to the side of the hallway and stick to the wall and giggle at me as I passed through the hallway. 

    As the sky turned redder, I realized that the sun was about to set and the curfew was just around the corner. Being already done with today’s quota, I was relieved and content that I was able to end the day on such a good note. The only thing that was left for me to do was to deliver all these boxes to the office of distribution, which was on the way back to my room. I strolled through the hallway, feeling the fresh green grass on my feet that reminded me how alive I was and how lucky I am to be alive doing the job for the state and my people. Everything could not be more real than ever. The fresh smell of the afternoon air, the touch of wet grass on the floor, the sight of the beautiful twilight and the sound of the grass brushing against my feet were all real and were proof that I was alive if not more alive than anyone.

    As real all of these sensations were, my rumbling stomach was also very real to me, as it was telling me that I need to eat. Since I started working today, I haven’t eaten all day besides a few pieces of toasts my wife prepared for me in the morning. She would always nag me in the morning for many things I would do wrong, like not eating enough before heading out to work, not spending enough time with her, or something even small like putting the salt at the “place it did not belong”. I could never avoid these petty naggings because I was not a perfect man. Infact, I am probably very far from perfect. But I did not have to be a perfect man because even those naggings I loved every bit of. These were the small details of my life that made up who I am, made up who my wife is, and this was the world that I was living in, that proved to me that I am not just a character living in a virtual reality, but an actual person living in this real world. In a way, because life wasn’t so perfect, I could find the true meaning of life, and strive to live longer. This world seemed to be perfectly designed for me to live, and I never once doubted the integrity of my life or the state. I never even opened the boxes I pick up and deliver everyday nor why I was chosen to do this job for what purpose. However, this did not matter to me. There was nothing I could possibly want more; it was true happiness. This was all thanks to the state and my fellow comrades for making this possible. I was truly blessed and I always wanted to give back more to the state and the people all my life.

    After a short but nice walk across the hallway, I have finally arrived at the office of distribution where I leave the stack of blue boxes I collect from my neighbors everyday. Everyday, I empty my wagon to the electronic box sorter that is placed right next to the office of distribution. The box sorter had this yellow metallic hopper on the top, where it had a hole just big enough to fit the cubical blue box I bring here. The sorter itself wasn’t too big, and the top of the hopper came right up to my belly, making it really easy for me to dump the boxes into the sorter from my wagon, as if the whole machine was designed just for me. When I finish dumping all the boxes into the hopper, I press the appropriately sized red button conveniently placed right next to the hopper, to start the sorting process. Because I need to make sure all the boxes go into the sorting machine without any problem, I need to stay around for a bit until the sorting process finishes. I usually take this time to relax and think about all the things that went well that day and the things I am going to talk about with my wife when I get back home.

    Waiting for the sorting process to finish, I gently closed my eyes and relieved the moments I experienced today in my head. The void in my mind started to fill up with many different images from this morning. I started to draw the tender face of my wife, along with other furniture and objects I could remember having in my room. These images faded away as I started drawing the freshly watered green grass on the hallway floor in my mind that I saw this morning when I stepped outside of my room to start working. I could feel the morning breeze gently stroking my hair and the warmth of the sun that hasn’t reached its peak yet. I could see the smiles and greetings of my neighbors and hear the laughters of the little boys scuttling away to make way for me to pass. All of these memories could be remembered in such details because I was alive and therefore my experience was as authentic as it could be. If someone was to come up and ask me, how exactly do I know that I am a real entity rather than some program simulated by a computer, I would present my thoughts and memories which would surely convince anyone who questioned the integrity of my existence.
    My short moment of reminiscence came to an abrupt stop as the sorting machine started to make a silent yet ominous beeping noise. I was baffled by the noise that I have never heard in my life before. This beeping was never part of my daily routine, and it shouldn’t be in my life. I started to feel paranoid that my rigid routine that kept my life so beautiful and happy would suddenly break apart because of the introduction of this new element in my life. 

    “What could I have possibly done differently than usual? What’s causing this beeping? What’s going to happen to me now?” I thought to myself, fearing the uncertainty that lies ahead.

    Whatever this noise was, I wanted to get away from it as fast as I could, and go back home to my wife. Maybe I was just tired and by the next day, I would forget all about the noise and go back to my normal life as if nothing abnormal happened. Perhaps I am just dreaming and this was a part of some elaborate nightmare.

    I abruptly picked up my wagon and started to make my way back to my room. Part of me wanted to drop the wagon and run back, but I feared that doing so would break my routine even further, maybe to the point where I can no longer fix or forget. This paranoia held me back and I could feel my legs and shoulder becoming heavier as if I was shackled. I slowly made my way back to my room, and at that point, I wasn’t even sure what time it was, and didn’t care to check if the time had already passed the curfew. After all, no one actually knew what would happen if someone walked outside past the curfew. No one really needed to know what happened, because we were all content with our lives, and whatever the state put in place for us, we were certain that it was for the good of all of us, and no one had to or bothered to break any rules. The rules were part of our life, and we considered them not rules or laws, but rather something that is part of our daily routine.

    By the time I got near the door of my room, the hallway was almost pitch black. Every door in the hallway had a little blue lightbulb attached on the top corner, which helped me navigate despite the lack of natural light, but they were only bright enough for me to see the doors in close proximity. Luckily, I was able to make my way back to my room with my wagon without tripping or injuring myself. Even until that moment, I could not see what was below my feet, and I could have tripped at any moment, if there was something like a ditch or a stone on the ground. Thankfully, I never had to deal with that problem, because the field was inspected everyday by my comrades and they kept the ground safe for even toddlers to crawl around.

    I was relieved that I was finally home, without having any more problems, and I could finally kiss my wife and goto sleep as if nothing strange happened. I grabbed the handle of my room’s door and pulled it gently, to make sure I didn't make any sound to wake up my neighbors. I slowly opened the door, and slid myself through the little space I created just enough for me to get through to my room. As soon as I got my whole body into the room, again I gently pulled the door back to close it without any noise. When the door clicked, there was no light coming through anymore and I could truly not see anything besides the infinite void in front of me. I touched the wall with my two hands and slowly navigated my way to the light switch, using my memories and my touches. I didn’t want to wake up my wife, because then she would nag me again in the morning about how I came back late and woke her up. It was better for me to keep this to myself, and go to bed as if nothing happened. Within a few minutes I could feel a plastic bulge poking out of the flat concrete wall of my room. Ensured that it is indeed my light switch, I put my finger under the bulge and flicked it up. The bright light suddenly saturated my eyes, and I cringed to protect my eyes and give them a little time to adjust. As I started gaining my vision again, I could see blurry figures of all the objects in my room: The sofas, the flower pot I had brought in a few weeks ago, and of course my bed. But as my visions got clearer, these figures started to look like something else. It wasn’t long until I realized that this wasn’t my room; In the center of my room, where my sofa should be was a large red wooden chair that seemed old and rudimentary. Instead of the big comfy bed I remembered having in my room, there was a small bed with a rugged mattress just big enough to fit myself  and no one else. The room seemed like it was built to lock someone away from society, and I was certain that no individual would live in a room like this. 

    “But why are these furnitures in this room, and how did I end up in this room?” I thought to myself, puzzled, and certain that I went through the door that belonged to me. I even made sure that the name on the door was mine, “James Boudain Resident”. I must have been really tired, and confused from all these madness that happened today. Or perhaps this was still part of my ongoing nightmare. My head started aching and I realized that all these questions were making me sick, and want to vomit. There were suddenly too many thoughts popping up in my head and I simply couldn’t take this load of thoughts at once. I stumbled my way back to the door I came in through, in a desperate attempt to escape this situation. As soon as I got near enough to reach the door handle, I lunged myself to the door and kicked open the door. I ran outside back into the dark hallway I walked from. I could feel the fresh grass on my feet, that was now very cold. I started running forward in distress, desperately looking for my room. As I ran faster and faster, under the blue light of the small light bulbs, the doors looked like they were running away from me into a different dimension.

    As I ran deeper into the hallway, I could hear a squelching sound behind me echoing through the hallway, as if I wasn’t the only one running away into this abyss. I didn’t have time to check whether I was alone or not in this darkness nor had the time to think about that anymore. It wasn’t long until I realized that things are getting stranger. I could hear the ominous beeping sound of the sorting machine again, and the more I ran, louder the sound got. Eventually, I realized that I wasn’t hallucinating, when I saw the edge of the gaping mouth of the hopper of the sorting machine in the distance. Since when were there two sorting machines in this hallway? The more I ran through the hallway, the beeping would fade out, but come back later on loudly, with the same old hopper sitting at the side of the hallway. I was running in a loop, I reluctantly realized.

    My aimless run came to a stop when I realized that there was no point of running anymore. This was all a dream, a terrible dream, and by desperately running away, I was letting some evil force that was making all these happen win. I briefly caught my breath, and stood still, knowing that I will eventually wake up from this dream if I didn’t give in. I stared at the red light in front of me that was approaching me very slowly. As the light got closer to me, I took a deep breath and acknowledged that my reaction to this bizarre situation was no longer meaningful. I closed my eyes and repeated to myself this is just a dream.
    “Subject one, five, three, zero, four, James Boudain: Failed retrieval of percels. Retrial required” said the mysterious robotic voice ahead of me.

    Suddenly, I felt something sharp piercing through my forehead, and I quickly lost consciousness as I realized I am finally waking up from this terrible nightmare, and I will finally return back to the reality where I can continue my happy life. I collapsed to the ground to the puddle of blood that had gushed out of my body. I was finally going home.




    Glory to the state! I could not emphasize more how thankful I am for this opportunity to contribute to such a great cause to help our state succeed and help our fellow comrades. Oh how lucky I am! It is another beautiful day to work and things could not be more perfect: A gentle breeze drying off sweats on my forehead, comforting warmth from the sunshine, and friendly neighbors greeting me with affectionate smiles as I run down the hallway to get to the next room. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Tue, 22 Sep 2020 00:00:00 +0900</pubDate>
				<link>/short%20story/2020/09/22/short-story-1.html</link>
				<guid isPermaLink="true">/short%20story/2020/09/22/short-story-1.html</guid>
			</item>
		
			<item>
				<title>(Side Track 2) How do OTP chip cards work?</title>
				<description>&lt;p&gt;I know it has been a year since I last posted, but here I am! It’s been a hectic year and I am sure 2020 has been a hectic year for you too, whoever is reading this post right now. Well, given the situation right now in the US, few months ago, I have decided to fly back to my home country, South Korea, to be with my family during these uncertain times. Ever since I started college, I have never stayed in Korea for more than two months. However, this time, it’s been almost 4 months staying in Korea consecutively, since 
I came here while my spring quarter was still in progress. There was no reason for me to stay in the states given that my school 
had gone entirely remote for that quarter.&lt;/p&gt;

&lt;p&gt;Staying in Korea for this long, I’ve experienced and seen many new things. Perhaps some of those things were not new to me, but 
I simply didn’t pay attention to them before. Out of all the new things I’ve seen in Korea, one of the more intriguing things 
I saw was my mom’s OTP card.&lt;/p&gt;

&lt;p&gt;So here’s a short story about how I came to encounter this maginificent piece of technology ( I will stop babbling after this. I promise :D ). One day, while I was at home, my mom called me and asked me to find a card that says “OTP” in her wallet. 
When I found the card I immidiately realized that this card was not just an ordinary card. It had a little button on the bottom corner and a small screen on the top just like the picture below. I was then told to press the button, and read the number 
that appeared in the small screen. When I pressed the button on the card, indeed some 7 digit number appeared on the screen. 
I asked her what she needed this number for, and she told me that she needs the number to access her bank account. That entire 
day, I couldn’t stop thinking about this damn card.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-us-west-2.amazonaws.com/go-medici/uploads/2015/12/Axis-Bank-Display-Debit-Card.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll be honest, I am not the brightest guy in the world, if you didn’t figure that out already from my other posts. Because 
of this I had many dumb questions pop up in my head, such as, “If OTP means one-time password, how can a simple card keep generating 
some random password?”, “Is this card connected to some server? How does the bank know about this number if the number 
is a randomly generated?” and “Is this some kind of a sorcery?” I was baffled. I tried to figure things out on my 
own, but I knew it was a waste of time given my limited knowledge on technology. So I decided to do some research, and here’s 
what I found.&lt;/p&gt;

&lt;p&gt;This particular card that my mom is using, was using the Time-based One-Time Password (TOTP). About every 20 seconds, when you 
press the button, the card would generate a new number. The card has an OTP chip inside, that uses a time based pseudo-random 
algorithm to generate a number that is shared with the bank’s remote server. The card is not connected to any server, let alone 
to the internet. That would be kind of weird, but cool. Bank’s server knows what number the card will generate based on the 
algorithm the chip is using. Apparently, to prevent situations where there might be a slight time differences between the card 
and the server, the server might allow about to one or two most recent keys generated.&lt;/p&gt;

&lt;p&gt;So how does the card keep generating these numbers if there’s no way to charge it? Well, it turns out there’s a small battery 
embedded in the card that can last a few years before it runs out. When the card dies, you can simply get it replaced at 
your bank.&lt;/p&gt;

&lt;p&gt;While I found this cool, it turns out that using the OTP hardware increases the frequency of payment failures, which could 
impact the banks overall revenue. Because of this, many banks in US prefer to send the OTP via SMS or email, eventhough 
that might introduce new potential security concerns.&lt;/p&gt;

&lt;p&gt;This is all I’ve got for now, but I want to dig deeper into this. I would like to know what are some benefits you can get 
in terms of security and fraud prevention when you are using hardware based OTP instead of the alternative. It would 
also be interesting to learn more about how the OTP hardware actually works, and how these algorithms work to sychronize the 
cards and the server.&lt;/p&gt;

&lt;p&gt;There are so much more to learn, but so little time. Sigh.&lt;/p&gt;
</description>
				<pubDate>Fri, 17 Jul 2020 00:00:00 +0900</pubDate>
				<link>/general/2020/07/17/side2.html</link>
				<guid isPermaLink="true">/general/2020/07/17/side2.html</guid>
			</item>
		
			<item>
				<title>Writing a programming language (Part 3 Local Variables)</title>
				<description>&lt;p&gt;&lt;a href=&quot;https://github.com/RyanJeon/RyanLang&quot;&gt;Compiler Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s been more than a month since I posted a last update on my compiler. Even though I had a very hectic month, I was able to make some breakthrough. I was able to implement a basic conditional, arithmetic operations, variable declaration, and function declaration/calls that allowed rlang to finally perform a recursive fibonacci algorithm:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rlang&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctr&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctr&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctr&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Above algorithm will print the first 20 numbers in fibonacci sequence. Along this journey, one thing that I found very interesting was how you can use the stack to hold local variables in functions and access the variables using RBP register. Let’s take a look at an example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we push the value 2 on our stack to access the value later when the variable is used. Then, we push our RBP address on our stack to save the original RBP address to restore when the program is done. After that, we can move our current RSP address to RBP and now our value 2 is accessible on the address RBP + 8 (given that RBP address is 8 bytes). Here is the diagram of what our stack looks like.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;x&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBP&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we add another local variable, we simply update our RBP address, while we keep the original RBP address on top of our stack.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Would produce:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;x&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBP&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So every time you want to store a local variable, you can use this code given x86-64 instruction set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;movq	$(Value of variable), %rax 		   //Store the value in rax
popq	%rbp					   //Restore RBP address
pushq	%rax					   //Push the value on the stack
pushq	%rbp					   //Push the RBP address to save the original address
movq	%rsp, %rbp				   //Update RBP address to top of the stack&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And to access our variable, we can simply do RBP relative addressing&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;movq	8(%rbp), %rax		//This will give you the value of the latest declared  variable&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the compiler implementation, I decided to keep a dictionary with variable name as key and stack offset as value to keep track of where my variable is located at, when you need to access that variable later on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Storing variable&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackindex&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackindex&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackindex&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*	
	With our previous example..
	Int a = 2
	Int b = 3

	LocalVariable map would look like
	[ a : 8 , b : 16 ]
*/&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Accessing variable&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Variable %s is not declared!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;movq	%d(%%rbp), %%rax&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ain’t that neat? Some of you might ask, why would we use RBP instead of RSP when our RSP will always be pointing to the top of our stack? I was thinking that too in the beginning. However, it made more sense when I thought about what could happen to RSP as you do more things such as making a function call. When you make a function call, you are pushing a return address to the stack, which will make RSP point to the return address. And during that function call you might be declaring more local variables within that function, and making more function calls which will continuously make RSP inconsistent. Long story short, RSP is too dynamic for it to be used as a consistent base address to reference local variables on the stack. Thus, making a use of RBP really makes our life easier, since RBP address will always be consistent.&lt;/p&gt;

&lt;p&gt;There’s still a lot to be done, but I am also having a lot of fun. As always, I will keep you posted on the progress :). Have a good day.&lt;/p&gt;
</description>
				<pubDate>Sat, 27 Jul 2019 00:00:00 +0900</pubDate>
				<link>/general/coding/2019/07/27/compiler3.html</link>
				<guid isPermaLink="true">/general/coding/2019/07/27/compiler3.html</guid>
			</item>
		
			<item>
				<title>Writing a programming language (Part 2 Lexer)</title>
				<description>&lt;p&gt;&lt;a href=&quot;https://github.com/RyanJeon/RyanLang&quot;&gt;Compiler Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Past couple of weeks have been a very hectic week for me. I just started my new summer internship, so I needed some time to settle into my new workplace and living space. Although I’ve been lazy on writing my blog, I did not stop working on my compiler. I did have some success putting some things together, such as basic functions, arithmetic, and variable declaration, but making these work was not a smooth journey for me. I was too excited to just start coding, and did not have a solid plan how I would approach the project. I do now have a pretty clear idea of the whole workflow of my compiler, but that came only after I had to learn a valuable lesson to always have plan before the hard way. So I encourage everyone to always remember to plan thoroughly before working on a big project like making a compiler.&lt;/p&gt;

&lt;p&gt;Anyways, enough rambling, I would like to talk about what I have so far. My compiler breaks down into 4 big parts: Lexer,
syntax tree generator, grammar classifier, and code generator. Today I will talk about the lexer. As we talked about before, lexer takes a string input, and generate corresponding tokens based on keywords in the input. This is the interface I created for a token, where each token will hold the type and the actual value of the keyword:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For converting a line of code into a list of tokens, I wrote a very simple function that iterates through the keywords and puts a corresponding token into the result token array. As you can see, the way I catch keywords in a line of code is by splitting the code by space. This means writing a code like “foo(a,b)” cannot be processed correctly, so instead, you must write in a format with space in between the keywords like “foo ( a , b )”. This is something that I will work on to improve in the future, but for now, this is good enough to test the rest of my compiler implementation!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Operator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDeclaration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Declaration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAssignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Assignment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.....&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Besides, some simple helper functions to classify keyword types, this is pretty much all I have for the lexer for now. I will keep you all posted on the progress :)&lt;/p&gt;
</description>
				<pubDate>Sun, 23 Jun 2019 00:00:00 +0900</pubDate>
				<link>/general/coding/2019/06/23/compiler2.html</link>
				<guid isPermaLink="true">/general/coding/2019/06/23/compiler2.html</guid>
			</item>
		
			<item>
				<title>Writing a programming language (Part 1 Layout)</title>
				<description>&lt;p&gt;Some people say they either don’t have enough time to work on side projects  or actually do not have time to work on them. 
But this is not the case for me. Turns out I have a lot of time just laying around so I decided to work on something big that 
I can learn a bunch from. It didn’t take me long until I decided to learn how to create my own programming language. How did I 
arrive at that? I mean, I would definitely learn a lot from working on a compiler and having my own programming language sounds 
exciting doesn’t it? A few weeks back I started learning Golang. So I decided to write my language in Golang.&lt;/p&gt;

&lt;p&gt;First, I researched how I should structure my compiler. Here is a good compiler diagram that I found online:
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ttOYPPL-XJIf4zVZQUBzsQ.jpeg&quot; alt=&quot;compiler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following this diagram, you pass in a piece of code to a compiler, and the input goes through a Lexer, where 
the input string split into keyword strings, that are then turn into tokens that will contain information about the keywords. For example, if you have 
a piece of code like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One example output that a Lexer might produce is “print”, “(“, “1”, “+”, “1”, “)”. These strings 
can be then turned into tokens. An example of list of tokens you could make from this list of 
strings might be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;print&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Operator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Integer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Operator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Integer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Operator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The way you design your token is entirely upto how you want to design your compiler.&lt;/p&gt;

&lt;p&gt;Then these tokens will get sent to the parser, where AST (Abstract Syntax Tree) will be generated with the given tokens. Depending on 
the grammar that your compiler follows, the parser will produce a corresponding AST. An example of AST of above example might look like: 
&lt;img src=&quot;https://i.imgur.com/eG3FJgW.png?1&quot; alt=&quot;AST&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, this AST will be interpreted and produce a corresponding assembly, which can be 
compiled down to an executable that you can run on your machine. I am planning to follow this 
structure closely. Let’s see what we get :).&lt;/p&gt;
</description>
				<pubDate>Mon, 10 Jun 2019 00:00:00 +0900</pubDate>
				<link>/general/coding/2019/06/10/compiler1.html</link>
				<guid isPermaLink="true">/general/coding/2019/06/10/compiler1.html</guid>
			</item>
		
			<item>
				<title>SSH into RaspberryPi through GCP VM instance</title>
				<description>&lt;p&gt;About a month ago I got my first ever personal RaspberryPi. Just like a kid who just got his 
first bike, I was filled with joy and excitement and wanted to play with it 24/7. But as a 
full time student, I was often far from home, and I had to contain myself from running back to my 
apartment to play with my Pi. I found a good solution to tackle this. I decided to create a 
reverse SSH tunnel from my Pi to a GCP VM instance, so that I can SSH into my Pi from the VM I already had remote access to.
This is very useful, because the alternative would have been port fowarding on my home router and 
this often is very cumbersome to do and manage. So let me share how I did it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
First, create a GCP VM instance if you do not already have one following this &lt;a href=&quot;https://cloud.google.com/compute/docs/instances/create-start-instance&quot;&gt;guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, Make sure you have gcloud sdk on your Pi. If not, you can install it with these commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;# Create environment variable for correct distribution
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CLOUD_SDK_REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cloud-sdk-$(grep VERSION_CODENAME /etc/os-release | cut -d '=' -f 2)&quot;&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;# Add the Cloud SDK distribution URI as a package source
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;# Import the Google Cloud Platform public key
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;# Update the package list and install the Cloud SDK
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sdk&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, from your Pi, type the following command to create a reverse SSH tunnel to your VM instance. The REMOTE_PORT value will be the 
port that will be used on your VM instance to be fowarded to your Pi’s port 22 (Default SSH port)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;gcloud&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PROJECT_NAME&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;VM_REGION&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;VM_NAME&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REMOTE_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A brief explanation of the command flags:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;-f: This runs SSH session to run in the background&lt;/li&gt;
  &lt;li&gt;-N: Does not open a shell or execute program on the remote host&lt;/li&gt;
  &lt;li&gt;-R: Creates a remote tunnel to your local machine (Your Pi)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! Now just simply SSH into the port that you chose, and you can now access your Pi from anywhere around the world as long as 
your Pi is running and safe at home. Happy hacking!&lt;/p&gt;
</description>
				<pubDate>Thu, 06 Jun 2019 00:00:00 +0900</pubDate>
				<link>/general/demo/2019/06/06/ssh-raspberrypi.html</link>
				<guid isPermaLink="true">/general/demo/2019/06/06/ssh-raspberrypi.html</guid>
			</item>
		
			<item>
				<title>(SideTrack 1) File Polyglot</title>
				<description>&lt;p&gt;&lt;img src=&quot;https://illusion-investigation.weebly.com/uploads/2/4/2/2/24222135/6476083.jpg?306&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During my usual sidetrack, I stumbled upon a quite amusing video through my colleague. 
The video was covering a section of &lt;a href=&quot;https://nostarch.com/gtfo&quot;&gt;PoC || GTFO&lt;/a&gt;, which 
was about a file polyglottery. Even though I was not able to find the original video I watched, &lt;a href=&quot;https://www.youtube.com/watch?time_continue=1166&amp;amp;v=fdKPnsWp9ho&quot;&gt;here&lt;/a&gt; is link to another video that covers the same topic. I encourage you to check it out. Just like what you might have guessed or already known, 
polyglot files can be interpreted as multiple different file types. Just think about how many nasty exploits you can do with these polyglot files. How exciting! I couldn’t 
help myself but to jump right into making one myself.&lt;/p&gt;

&lt;p&gt;The first polyglot file that I attempted to make was a GIF + JS polyglot because it looked the most approachable and interesting. This &lt;a href=&quot;https://stegosploit.info/&quot;&gt;documentation&lt;/a&gt; that I found had a very thorough explanation of an approach. Learning step by step, I began by analyzing the byte format of GIF files. Image files 
like PNG, JPEG, and GIF always begin with header bytes that contain meta data about 
the files such as size of the file, the width of the image, and the height of the image. If an image file does not have a valid header, it can’t be correctly decoded and you won’t be able to see the image. So we need to figure out how to embed our JavaScript into our GIF file without corrupting the header of the GIF file. This is 
the general format of GIF that I got from a &lt;a href=&quot;https://www.fileformat.info/format/gif/egff.htm&quot;&gt;source&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GifHeader&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Header&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* Header Signature (always &quot;GIF&quot;) */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* GIF format version(&quot;87a&quot; or &quot;89a&quot;) */&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Logical Screen Descriptor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* Width of Display Screen in Pixels */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* Height of Display Screen in Pixels */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Packed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/* Screen and Color Map Information */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Background Color Index */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AspectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* Pixel Aspect Ratio */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GIFHEAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, GIF file always start with a header signature “GIF” followed by 
the GIF format version. Notice that these 6 bytes can be used as a valid JavaScript 
variable? Even though we do not know if other succeeding bytes can be validly interpreted in common browsers like Chrome or Firefox, we are certain that the first 6 bytes 
will always be a valid JavaScript variable name. This means that we are good to go 
as long as we can bypass the other bytes. The fact that the screen width comes right 
after our golden 6 bytes is the key, because we can define the screen width with any 
2 bytes and still have a valid GIF header. So we can comment out the whole garbage 
bytes in the middle by setting our width to 0x2A2F (It will be a hell of a long GIF..) which translates to ‘/*’ and 
adding 0x2F2A ‘*/’,  at the end of the file to create a valid JavaScript comment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;GIF89a&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...... (GIF image data) .....*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now to create a valid Javascript syntax, we can simply add ‘=SOME VALUE’ to 
define the variable at the top of our file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;GIF89a&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...... (GIF image data) .....*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we can append any JavaScript we want.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;GIF89a&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...... (GIF image data) .....*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'This is cool!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With such polyglot, we can do crazy things like using the same GIF file to render the GIF image and execute customized script as well in most browsers. Given our example above, the 
following HTML code will render our GIF, pop up an alert box, and log out ‘:)’.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;giphy.gif&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;giphy.gif&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we are done … But are we? What if there are bytes in the middle of the image that 
can translate into ‘*/’? This would surely break our method, because ‘/* */ */’ is not a valid JavaScript syntax and whatever that comes after the comment will not execute. Turns out, you will probably encounter bytes equivalent to ‘*/’ in the 
middle of the image in most GIFs, given how many bytes there are in a common GIF file. 
My attempt to bypass by removing and replacing the problematic bytes failed miserably, 
as it corrupted the file enough to make it look glitchy. Perhaps this doesn’t matter in most use cases of such polyglot, because it still will be intepreted as GIF with a valid header and successfully deliver desired scripts as long as there’s no &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_Disarm_%26_Reconstruction&quot;&gt;CDR&lt;/a&gt; present. Anyways, &lt;a href=&quot;https://github.com/RyanJeon/Polyglot&quot;&gt;here&lt;/a&gt; is the code that I wrote to assist generating polyglot files. Hope you found 
this fun to explore as well.&lt;/p&gt;
</description>
				<pubDate>Wed, 05 Jun 2019 00:00:00 +0900</pubDate>
				<link>/general/demo/2019/06/05/side1.html</link>
				<guid isPermaLink="true">/general/demo/2019/06/05/side1.html</guid>
			</item>
		
			<item>
				<title>(SideTrack 0) Prologue</title>
				<description>&lt;p&gt;Whenever I find myself in a pile of tasks I need to do, I always take some time 
to sidetrack myself. More often than not, taking a step back from all the busy work 
helps me, because it allows me to reorganize myself and do the tasks better when I come back to them. Perhaps this is just an excuse to justify myself procrasinating, but in my opinion, taking an hour or two everyday to take a real break rather helps than not. 
Seriously, I encourage you to do the same.&lt;/p&gt;

&lt;p&gt;Anyways, I would like to share new things I find and learn during my sidetracks. I have been around this world about 20 years, but there are still a lot to learn and to be 
excited about. So I invite you to learn with me. Whether my topics are new to you 
or not, I hope you will find them amusing. Welcome to my sidetracks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.gardendesign.com/pictures/images/400x320Exact_0x0/dream-team-s-portland-garden_6/gopher-pocket-gopher-shutterstock-com_13178.jpg&quot; alt=&quot;gopher&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Tue, 04 Jun 2019 00:00:00 +0900</pubDate>
				<link>/general/demo/2019/06/04/hello-world.html</link>
				<guid isPermaLink="true">/general/demo/2019/06/04/hello-world.html</guid>
			</item>
		
	</channel>
</rss>
