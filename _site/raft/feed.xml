<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Ryan Jeon</title>
		<description>Stylish Jekyll Theme</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Writing a programming language (Part 1 Layout)</title>
				<description>&lt;p&gt;Some people say they either don’t have enough time to work on side projects  or actually do not have time to work on them. 
But this is not the case for me. Turns out I have a lot of time just laying around so I decided to work on something big that 
I can learn a bunch from. It didn’t take me long until I decided to learn how to create my own programming language. How did I 
arrive at that? I mean, I would definitely learn a lot from working on a compiler and having my own programming language sounds 
exciting doesn’t it? A few weeks back I started learning Golang. So I decided to write my language in Golang.&lt;/p&gt;

&lt;p&gt;First, I researched how I should structure my compiler. Here is a good compiler diagram that I found online:
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ttOYPPL-XJIf4zVZQUBzsQ.jpeg&quot; alt=&quot;compiler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following this diagram, you pass in a piece of code to a compiler, and the input goes through a Lexer, where 
the input string split into keyword strings, that are then turn into tokens that will contain information about the keywords. For example, if you have 
a piece of code like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One example output that a Lexer might produce is “print”, “(“, “1”, “+”, “1”, “)”. These strings 
can be then turned into tokens. An example of list of tokens you could make from this list of 
strings might be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;print&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Operator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Integer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Operator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Integer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Operator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The way you design your token is entirely upto how you want to design your compiler.&lt;/p&gt;

&lt;p&gt;Then these tokens will get sent to the parser, where AST (Abstract Syntax Tree) will be generated with the given tokens. Depending on 
the grammar that your compiler follows, the parser will produce a corresponding AST. An example of AST of above example might look like: 
&lt;img src=&quot;https://i.imgur.com/eG3FJgW.png?1&quot; alt=&quot;AST&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, this AST will be interpreted and produce a corresponding assembly, which can be 
compiled down to an executable that you can run on your machine. I am planning to follow this 
structure closely. Let’s see what we get :).&lt;/p&gt;
</description>
				<pubDate>Mon, 10 Jun 2019 00:00:00 -0700</pubDate>
				<link>/general/coding/2019/06/10/compiler1.html</link>
				<guid isPermaLink="true">/general/coding/2019/06/10/compiler1.html</guid>
			</item>
		
			<item>
				<title>SSH into RaspberryPi through GCP VM instance</title>
				<description>&lt;p&gt;About a month ago I got my first ever personal RaspberryPi. Just like a kid who just got his 
first bike, I was filled with joy and excitement and wanted to play with it 24/7. But as a 
full time student, I was often far from home, and I had to contain myself from running back to my 
apartment to play with my Pi. I found a good solution to tackle this. I decided to create a 
reverse SSH tunnel from my Pi to a GCP VM instance, so that I can SSH into my Pi from the VM I already had remote access to.
This is very useful, because the alternative would have been port fowarding on my home router and 
this often is very cumbersome to do and manage. So let me share how I did it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
First, create a GCP VM instance if you do not already have one following this &lt;a href=&quot;https://cloud.google.com/compute/docs/instances/create-start-instance&quot;&gt;guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, Make sure you have gcloud sdk on your Pi. If not, you can install it with these commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;# Create environment variable for correct distribution
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CLOUD_SDK_REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cloud-sdk-$(grep VERSION_CODENAME /etc/os-release | cut -d '=' -f 2)&quot;&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;# Add the Cloud SDK distribution URI as a package source
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;# Import the Google Cloud Platform public key
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;# Update the package list and install the Cloud SDK
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sdk&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, from your Pi, type the following command to create a reverse SSH tunnel to your VM instance. The REMOTE_PORT value will be the 
port that will be used on your VM instance to be fowarded to your Pi’s port 22 (Default SSH port)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;gcloud&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PROJECT_NAME&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;VM_REGION&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;VM_NAME&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REMOTE_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A brief explanation of the command flags:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;-f: This runs SSH session to run in the background&lt;/li&gt;
  &lt;li&gt;-N: Does not open a shell or execute program on the remote host&lt;/li&gt;
  &lt;li&gt;-R: Creates a remote tunnel to your local machine (Your Pi)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! Now just simply SSH into the port that you chose, and you can now access your Pi from anywhere around the world as long as 
your Pi is running and safe at home. Happy hacking!&lt;/p&gt;
</description>
				<pubDate>Thu, 06 Jun 2019 00:00:00 -0700</pubDate>
				<link>/general/demo/2019/06/06/ssh-raspberrypi.html</link>
				<guid isPermaLink="true">/general/demo/2019/06/06/ssh-raspberrypi.html</guid>
			</item>
		
			<item>
				<title>(SideTrack 1) File Polyglot</title>
				<description>&lt;p&gt;&lt;img src=&quot;http://illusion-investigation.weebly.com/uploads/2/4/2/2/24222135/6476083.jpg?306&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During my usual sidetrack, I stumbled upon a quite amusing video through my colleague. 
The video was covering a section of &lt;a href=&quot;https://nostarch.com/gtfo&quot;&gt;PoC || GTFO&lt;/a&gt;, which 
was about a file polyglottery. Even though I was not able to find the original video I watched, &lt;a href=&quot;https://www.youtube.com/watch?time_continue=1166&amp;amp;v=fdKPnsWp9ho&quot;&gt;here&lt;/a&gt; is link to another video that covers the same topic. I encourage you to check it out. Just like what you might have guessed or already known, 
polyglot files can be interpreted as multiple different file types. Just think about how many nasty exploits you can do with these polyglot files. How exciting! I couldn’t 
help myself but to jump right into making one myself.&lt;/p&gt;

&lt;p&gt;The first polyglot file that I attempted to make was a GIF + JS polyglot because it looked the most approachable and interesting. This &lt;a href=&quot;https://stegosploit.info/&quot;&gt;documentation&lt;/a&gt; that I found had a very thorough explanation of an approach. Learning step by step, I began by analyzing the byte format of GIF files. Image files 
like PNG, JPEG, and GIF always begin with header bytes that contain meta data about 
the files such as size of the file, the width of the image, and the height of the image. If an image file does not have a valid header, it can’t be correctly decoded and you won’t be able to see the image. So we need to figure out how to embed our JavaScript into our GIF file without corrupting the header of the GIF file. This is 
the general format of GIF that I got from a &lt;a href=&quot;https://www.fileformat.info/format/gif/egff.htm&quot;&gt;source&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GifHeader&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Header&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* Header Signature (always &quot;GIF&quot;) */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* GIF format version(&quot;87a&quot; or &quot;89a&quot;) */&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Logical Screen Descriptor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* Width of Display Screen in Pixels */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* Height of Display Screen in Pixels */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Packed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/* Screen and Color Map Information */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Background Color Index */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AspectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* Pixel Aspect Ratio */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GIFHEAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, GIF file always start with a header signature “GIF” followed by 
the GIF format version. Notice that these 6 bytes can be used as a valid JavaScript 
variable? Even though we do not know if other succeeding bytes can be validly interpreted in common JavaScript compilers, we are certain that the first 6 bytes 
will always be a valid JavaScript variable name. This means that we are good to go 
as long as we can bypass the other bytes. The fact that the screen width comes right 
after our golden 6 bytes is the key, because we can define the screen width with any 
2 bytes and still have a valid GIF header. So we can comment out the whole garbage 
bytes in the middle by setting our width to 0x2A2F (It will be a hell of a long GIF..) which translates to ‘/*’ and 
adding 0x2F2A ‘*/’,  at the end of the file to create a valid JavaScript comment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;GIF89a&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...... (GIF image data) .....*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now to create a valid Javascript syntax, we can simply add ‘=SOME VALUE’ to 
define the variable at the top of our file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;GIF89a&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...... (GIF image data) .....*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we can append any JavaScript we want.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;GIF89a&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...... (GIF image data) .....*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'This is cool!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With such polyglot, we can do crazy things like using the same GIF file to render the GIF image and execute customized script as well in most browsers. Given our example above, the 
following HTML code will render our GIF, pop up an alert box, and log out ‘:)’.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;giphy.gif&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;giphy.gif&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we are done … But are we? What if there are bytes in the middle of the image that 
can translate into ‘*/’? This would surely break our method, because ‘/* */ */’ is not a valid JavaScript Syntax. Turns out, you will probably encounter ‘*/’ in the 
middle of the image in most GIFs, given how many bytes there are in a common GIF file. 
My attempt to bypass by removing and replacing the problematic bytes failed miserably, 
as it corrupted the file enough to make it look glitchy. Perhaps this doesn’t matter in most use cases of such polyglot, because it still will be intepreted as GIF with a valid header and successfully deliver desired scripts as long as there’s no &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_Disarm_%26_Reconstruction&quot;&gt;CDR&lt;/a&gt; present. Anyways, &lt;a href=&quot;https://github.com/RyanJeon/Polyglot&quot;&gt;here&lt;/a&gt; is the code that I wrote to assist generating polyglot files. Hope you found 
this fun to explore as well.&lt;/p&gt;
</description>
				<pubDate>Wed, 05 Jun 2019 00:00:00 -0700</pubDate>
				<link>/general/demo/2019/06/05/side1.html</link>
				<guid isPermaLink="true">/general/demo/2019/06/05/side1.html</guid>
			</item>
		
			<item>
				<title>(SideTrack 0) Prologue</title>
				<description>&lt;p&gt;Whenever I find myself in a pile of tasks I need to do, I always take some time 
to sidetrack myself. More often than not, taking a step back from all the busy work 
helps me, because it allows me to reorganize myself and do the tasks better when I come back to them. Perhaps this is just an excuse to justify myself procrasinating, but in my opinion, taking an hour or two everyday to take a real break rather helps than not. 
Seriously, I encourage you to do the same.&lt;/p&gt;

&lt;p&gt;Anyways, I would like to share new things I find and learn during my sidetracks. I have been around this world about 20 years, but there are still a lot to learn and to be 
excited about. So I invite you to learn with me. Whether my topics are new to you 
or not, I hope you will find them amusing. Welcome to my sidetracks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.gardendesign.com/pictures/images/400x320Exact_0x0/dream-team-s-portland-garden_6/gopher-pocket-gopher-shutterstock-com_13178.jpg&quot; alt=&quot;gopher&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Tue, 04 Jun 2019 00:00:00 -0700</pubDate>
				<link>/general/demo/2019/06/04/hello-world.html</link>
				<guid isPermaLink="true">/general/demo/2019/06/04/hello-world.html</guid>
			</item>
		
	</channel>
</rss>
